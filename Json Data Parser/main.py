import json
import csv
import re
from math import comb, ceil

data = {"dataType": 1, "readXor": 0, "readTimestamp": "2021-03-11T04:42:52+00:00",
        "readData": "\u0002P.01(0210310001500)(00)(15)(6)(1.9)(kWh)(2.9)(kWh)(5.9)(kvarh)(6.9)(kvarh)(7.9)(kvarh)(8.9)(kvarh)\r\n(100.001)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(200.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(300.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.001)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.001)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.001)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.001)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.001)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.001)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.001)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.001)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.001)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.001)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.001)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.001)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.001)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.001)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.001)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.001)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.024)(000.000)(000.000)(000.001)(000.000)\r\n(000.000)(000.079)(000.000)(000.000)(000.007)(000.000)\r\n(000.000)(000.078)(000.000)(000.000)(000.006)(000.000)\r\n(000.000)(000.079)(000.000)(000.000)(000.007)(000.000)\r\n(000.000)(000.079)(000.000)(000.000)(000.006)(000.000)\r\n(000.000)(000.078)(000.000)(000.000)(000.006)(000.000)\r\n(000.000)(000.079)(000.000)(000.000)(000.007)(000.000)\r\n(000.000)(000.079)(000.000)(000.000)(000.006)(000.000)\r\n(000.000)(000.078)(000.000)(000.000)(000.007)(000.000)\r\n(000.000)(000.005)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.001)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.001)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.001)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.001)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.001)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.001)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.001)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.001)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.001)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.001)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.001)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\n(000.000)(000.000)(000.000)(000.000)(000.000)(000.000)\r\nP.01(0210410001500)(00)(15)(6)(1.9)(kWh)(2.9)(kWh)(5.9)(kvarh)(6.9)(kvarh)(7.9)(kvarh)(8.9)(kvarh)\r",
        "readLen": 5476, "meterFlag": "ABB6@V4.50 ", "readCount": 0, "meterSerial": "00704945"}
# Creates a list containing 5 lists, each of 8 items, all set to 0


EXCEL_ROW, EXCEL_COLS = (49, 33)
combined_matrix = [[0 for i in range(EXCEL_COLS)] for j in range(EXCEL_ROW)]


#########################################################################################################
class Parser:
    count = 0
    File_name = ""
    Matrix_8x8 = [[0 for i in range(31)] for j in range(196)]
    Months = []
    def __init__(self, json_list):
        self.json_list = json_list
        print(len(json_list))
        self.set_file_name()
        self.json_list_parser(type)

    #########################################################################################################
    def clocks_set(self):
        clocks_name = [0] * 48
        clocks = ["00:00 - 01:00", "01:00 - 02:00", "02:00 - 03:00", "03:00 - 04:00",
                  "04:00 - 05:00", "05:00 - 06:00", "06:00 - 07:00", "07:00 - 08:00",
                  "08:00 - 09:00", "09:00 - 10:00", "10:00 - 11:00", "11:00 - 12:00",
                  "12:00 - 13:00", "13:00 - 14:00", "14:00 - 15:00", "15:00 - 16:00",
                  "16:00 - 17:00", "17:00 - 18:00", "18:00 - 19:00", "19:00 - 20:00",
                  "20:00 - 21:00", "21:00 - 22:00", "22:00 - 23:00", "23:00 - 24:00"]
        index = 0
        for i in range(0, 48, 2):
            clocks_name[i] = clocks[index]
            clocks_name[i + 1] = clocks[index]
            index = index + 1
        return clocks_name

    #########################################################################################################
    def day_set(self):
        days_and_state = ["Clocks ", "State", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14",
                          "15", "16",
                          "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31"]

        return days_and_state

    #########################################################################################################
    def state_set(self):
        state = ["Alis", "Veris"]
        return state

    #########################################################################################################
    def set_file_name(self):
        year = ""
        month = ""
        day = ""
        count = 0
        for text in self.json_list:
            if str(text).__contains__("P.01") == True and count == 0:
                res = re.findall(r'\(.*?\)', str(text))

                first_bracket = res[0]

                year = first_bracket[2:4]
                month = first_bracket[4:6]
                day = first_bracket[6:8]
                count += 1

        for text in self.json_list:
            if str(text).__contains__("P.01")== True:
                res = re.findall(r'\(.*?\)', str(text))
                first_bracket = res[0]

                if str(text).count(first_bracket[4:6]) > 0:
                    self.Months.append(first_bracket[4:6])
        print("year: ", year, "month:", month, "day: ", day)
        self.File_name = year + month + day

    #########################################################################################################
    def json_list_parser(self, tpye):
        print("result")

        clocks = self.clocks_set()
        state = self.state_set()
        days = self.day_set()

        for colummn in range(EXCEL_ROW - 1):
            combined_matrix[colummn + 1][1] = state[colummn % 2]

        for colummn in range(EXCEL_ROW - 1):
            combined_matrix[colummn + 1][0] = clocks[colummn]

        for i in range(EXCEL_COLS):
            combined_matrix[0][i] = days[i]

        for row in range(EXCEL_ROW):
            for j in range(EXCEL_COLS):
                print(combined_matrix[row][j], end=' ')
            print()

    #########################################################################################################
    def write_cvs(self):

        day = 0;
        month = 0;
        year = 0;
        clock = 0;
        minute = 0;
        second = 0;
        last_index = -1;
        next_day = 0;
        previous_month = self.Months[0];
        # Open File
        # Write data to file
        for text in self.json_list:
            previous_day = next_day;

            if str(text).__contains__("P.01") == True:
                partition = re.findall(r'\(.*?\)', str(text))

                first_bracket = partition[0]
                year = first_bracket[2:4]
                month = first_bracket[4:6]
                day = first_bracket[6:8]

                clock = first_bracket[8:10]
                minute = first_bracket[10:12]
                second = first_bracket[12:14]

                print("year: ", year, "month: ", month, " day: ", day, "clock: " , clock , "minute: " , minute , "second " , second)

                if (previous_month == month):
                    if (previous_day != day):
                        last_index = 2 * (int)(clock) * 4 + 2 * (int(minute) / 15)

                    else:
                        test = (minute)
                        test = ceil(test / 15)
                        last_index = (2 * clock * 4 + 2 * test.intValue())

                    next_day = day

                elif previous_month != month:
                    day = previous_day
                    last_index = 192

            else:
                partition = re.findall(r'\(.*?\)', str(text))
                first_data_block = partition[0]
                second_data_block = partition[1]


                first_data_block = first_data_block.replace('(','')
                first_data_block = first_data_block.replace(')', '')
                #first_data_block = first_data_block.replace('.',',')

                second_data_block = second_data_block.replace('(', '')
                second_data_block = second_data_block.replace(')', '')
                #second_data_block = second_data_block.replace('.', ',')

                self.Matrix_8x8 [(int)(last_index)][(int)(day)] = first_data_block
                self.Matrix_8x8[(int)(last_index)+1][(int)(day)] = second_data_block
                last_index += 2;

                print("last index: ", last_index)


            toplam_alis = 0;
            toplam_veris = 0;
            index = 1;

        for i in range(2,31):
            index = 1

            for j in range(2,192,8):
                print("i: " ,i , " j:" , j)
                toplam_alis = 0
                toplam_veris =0

                toplam_alis += float(self.Matrix_8x8[j][i])
                toplam_alis += (float)(self.Matrix_8x8[j + 2][i])
                toplam_alis += (float)(self.Matrix_8x8[j + 4][i])
                toplam_alis += (float)(self.Matrix_8x8[j + 6][i])

                print("-------------------------");
                toplam_veris += (float)(self.Matrix_8x8[j + 1][i])
                toplam_veris += (float)(self.Matrix_8x8[j + 3][i])
                toplam_veris += (float)(self.Matrix_8x8[j + 5][i])
                toplam_veris += (float)(self.Matrix_8x8[j + 7][i])

                combined_matrix[index][i +1] = toplam_alis
                combined_matrix[index + 1][i +1] = toplam_veris
                index += 2



        with open(self.File_name + '.csv', 'w') as f:
            csvWriter = csv.writer(f, delimiter=',')
            csvWriter.writerows(combined_matrix)
        f.close()

    #########################################################################################################
    def parse_brackets(self, s):
        s = str(s)
        res = ""
        if (s.__contains__("P.01") != True):
            print("s: ", s)
            res = re.findall(r'\(.*?\)', s)

            # printing result
            print("i.", self.count, "The element between brackets : " + str(res), "1. eleman: ", res[0], "2. eleman: ",
                  res[1])
            self.count = self.count + 1

        return res


#########################################################################################################
def parse_txt(s):
    txt = s.split("\r\n")
    return txt


if __name__ == '__main__':
    s = parse_txt(data.get("readData"))
    parse = Parser(s)
    parse.write_cvs()
